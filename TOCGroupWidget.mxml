<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   xmlns:toccomp="widgets.TOCGroup.toc.*"
				   xmlns:esri="http://www.esri.com/2008/ags"
                   widgetConfigLoaded="init()"
				   mouseDown="wTemplate_clickHandler(event)"
                   x="600" y="400"
				   initialize="basewidget_initializeHandler(event)">
	
    <fx:Script>
        <![CDATA[
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.layers.Layer;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			
			import flash.net.registerClassAlias;
			
			import mx.collections.ArrayCollection;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.components.Scroller;
			
			import widgets.TOCGroup.toc.TOC;
			import widgets.TOCGroup.toc.tocClasses.LegendDataClassItem;
			import widgets.TOCGroup.toc.tocClasses.LegendDataItem;
			import widgets.TOCGroup.toc.tocClasses.LegendSymbolItem;
			
			//Build Constants
			protected const VERSION:String = "3.1.5";
			protected const BUILDDATE:String = "2/4/2013";
			
			//Resources
			[Embed(source="assets/images/i_about.png")]
			private var iconClass:Class;
			
			[Event(name="layervischanged", type="flash.events.Event")]
			private static const LAYER_VIS_CHANGED:String = "layervischanged";
			
            private const ICON_URL:String = "widgets/TOCGroup/assets/images/";
			
			[Embed(source="widgets/TOCGroup/assets/images/plus.png")]
			public var plus:Class;
			
			[Embed(source="widgets/TOCGroup/assets/images/minus.png")]
			public var minus:Class;
			
			[Bindable] private var expanded:Boolean;
			
			[Bindable] private var fullexpand:Boolean;
			
			[Bindable] private var legendCollapsed:Boolean;
			
			[Bindable] private var UseNewEsriDescrption:Boolean;
			
			[Bindable] private var disableZoomTo:Boolean;
			
			//label
			[Bindable] private var layerVisibility:String;
			
			[Bindable]private var lTimeout:int = 60;
			
			private var excludeGraphicsLayers:Boolean = false;
			
			[Bindable] private var ZoomToMakeVisible:String;
			
			[Bindable] private var ExpandAll:String;
			
			[Bindable] private var CollapseAll:String;
			
			[Bindable] private var GeneratingLegendMsg:String;
			
			[Bindable] private var Themes:String;
			
			// Layers loaded variables
			private var layersLoaded:Number = 0;
			private var numberOfLayers:Number

            private function init():void
            {	
                if (configXML){
					ZoomToMakeVisible = configXML.labels.zoomtomakevisible || "Zoom To Make Visible";
					ExpandAll = configXML.labels.expandall || "Expand All Layers";
					CollapseAll = configXML.labels.collapseall || "Collapse All Layers";
					layerVisibility = configXML.labels.visibilitylabel || getDefaultString("layerListTitle");
					GeneratingLegendMsg = configXML.labels.generatinglegendmsg || "Generating TOC Legend";
					expanded = configXML.tocsettings.expanded && configXML.tocsettings.expanded == "true";
					disableZoomTo = configXML.tocsettings.disablezoomtomenuoption && configXML.tocsettings.disablezoomtomenuoption == "true";
					if(expanded)
						fullexpand = configXML.tocsettings.expanded.@everything[0] && configXML.tocsettings.expanded.@everything[0] == "true";
					legendCollapsed = configXML.tocsettings.collapselegends && configXML.tocsettings.collapselegends == "true";
					UseNewEsriDescrption = configXML.usenewesridescription && configXML.usenewesridescription == "true";	
                }
				
				// Setup timer to wait for one second, so all layers will be loaded
				var timer:Timer = new Timer(2000);
				timer.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void{						
					// Go through all layers until all loaded then go to next function
					numberOfLayers = map.layerIds.length-1;
					for each (var id:String in map.layerIds)
					{
						var layer:Layer = map.getLayer(id);
						// If loaded then add number to layers loaded
						if (layer.loaded)
						{
							layersLoaded++;
						}
							// Otherwise add handler for when layer has loaded
						else {
							layer.addEventListener(LayerEvent.LOAD, function(event:LayerEvent):void{
								layersLoaded++;
								// If all layers loaded
								if (layersLoaded == numberOfLayers) {
									loadLayers();
									// Stop the timer
									timer.stop();	
								}
							});
						}
						
						// If all layers loaded
						if (layersLoaded == numberOfLayers) {
							loadLayers();
							// Stop the timer
							timer.stop();	
						}
					}
				});
				timer.start();
            }
			
			private function loadLayers():void {				
				// Load in accordion theme tabs
				Themes = configXML.themes;
				var ThemesArray:Array = Themes.split(",");
				var count:int = 0;
				while (ThemesArray.length > count) {
					// Setup array to hold all layers in map
					var excludedLayers:ArrayCollection = new ArrayCollection;
					// Iterate through each of the maps services adding to array
					for (var i:Number = map.layerIds.length -1; i >= 0; i--)
					{
						var layer:Layer = map.getLayer(map.layerIds[i]);
						var name:String = layer.name;
						var layerExclude:Object ={
							name: name,
							ids: null,
							isbasemap: false
						}		
						// Add them to the exclude all layers array
						excludedLayers.addItem(layerExclude);						
					}			
					
					// Get layers to be included in the theme
					var includeList:XMLList = configXML.includelayers.(@theme == ThemesArray[count]).includelayer;
					for (var j:Number = 0; j < includeList.length(); j++){
						// Get the map service name
						var mapservicename:String = includeList[j].@mapservice;	
						
						// for all the layers in the map, update the the exclude list to remove map
						// services from config
						for (var a:int=excludedLayers.length-1; a>=0; a--)
						{								
							if (excludedLayers.source[a].name == mapservicename)
							{
								excludedLayers.removeItemAt(a);
							}									
						}
					}							
					
					// Add new box to the accordion
					var vbox:VBox = new VBox();
					vbox.label = ThemesArray[count];
					// Set the vbox to be same width as widget
					vbox.percentWidth = 100;
					
					// Add scroller
					var scroller:Scroller = new Scroller();
					scroller.id = "Scroller";
					scroller.percentHeight = 100;
					scroller.percentWidth = 100;
					vbox.addChild(scroller);
					
					// Add TOC
					var Layers:TOC = new TOC();
					Layers.percentHeight = 100;
					Layers.percentWidth = 100;
					// Better of not setting this in a panel
					Layers.tocMinWidth = wTemplate.width - 60;
					Layers.labels = [ZoomToMakeVisible,ExpandAll,CollapseAll];
					Layers.scroller = scroller;
					Layers.expanded = expanded;
					Layers.disableZoomTo = disableZoomTo;
					Layers.fullexpanded = fullexpand;
					Layers.legendCollapsed = legendCollapsed;
					Layers.liveScrolling = false;
					Layers.variableRowHeight = true;
					Layers.useesridescription = UseNewEsriDescrption;
					Layers.loader = boxMessage;
					Layers.map = map;
					Layers.isMapServiceOnly = false; //gotta get this from the config file
					Layers.excludeGraphicsLayers = configXML.excludegraphiclayers &&  configXML.excludegraphiclayers == "true";
					Layers.setStyle("disclosureOpenIcon", minus);
					Layers.setStyle("disclosureClosedIcon", plus);
					Layers.excludeLayers = excludedLayers;
					vbox.addChild(Layers);
					
					accordion.addChild(vbox);						
					count++;
				}
			}			
			
			protected function wTemplate_clickHandler(event:MouseEvent):void
			{
				AppEvent.dispatch(AppEvent.TOC_HIDDEN); // always hide the layer options popup
			}
			
			protected function basewidget_initializeHandler(event:FlexEvent):void
			{
				registerClassAlias("widgets.TOCGroup.toc.tocClasses.LegendDataClassItem", LegendDataClassItem);
				registerClassAlias("widgets.TOCGroup.toc.tocClasses.LegendDataItem", LegendDataItem);
				registerClassAlias("widgets.TOCGroup.toc.tocClasses.LegendSymbolItem", LegendSymbolItem);
			}
			
		]]>
    </fx:Script>
    <viewer:WidgetTemplate id="wTemplate"
						   height="420"
						   skinClass="com.esri.viewer.skins.WidgetTemplateSkin"
						   width="360">
		<s:Group height="100%" width="100%">
			<s:layout>
				<s:VerticalLayout gap="1"/>
			</s:layout>	
			<s:HGroup id="boxMessage"
					  width="100%"
					  includeInLayout="true"
					  visible="true" 
					  verticalAlign="middle"
					  horizontalAlign="center">								
				<mx:Image id="swfMessage" source="widgets/TOCGroup/assets/images/loader.swf"/>								
				<s:Label id="txtMessage" width="90%" visible="true" text="{GeneratingLegendMsg}"/>
			</s:HGroup>			
			<mx:Accordion id="accordion" borderAlpha="0" width="100%" height="100%" creationPolicy="all"/>
		</s:Group>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>