<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:esri="http://www.esri.com/2008/ags"
         xmlns:singleLineSearch="com.esri.viewer.components.singleLineSearch.*"
         focusOut="this_focusOutHandler(event)"
         initialize="this_initializeHandler(event)">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.Map;
            import com.esri.ags.Units;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.geometry.Polyline;
            import com.esri.ags.portal.PopUpRenderer;
            import com.esri.ags.portal.supportClasses.PopUpInfo;
            import com.esri.ags.symbols.SimpleFillSymbol;
            import com.esri.ags.symbols.SimpleLineSymbol;
            import com.esri.ags.symbols.SimpleMarkerSymbol;
            import com.esri.ags.symbols.Symbol;
            import com.esri.ags.tasks.FindTask;
            import com.esri.ags.tasks.JSONTask;
            import com.esri.ags.tasks.supportClasses.AddressCandidate;
            import com.esri.ags.tasks.supportClasses.AddressToLocationsParameters;
            import com.esri.ags.tasks.supportClasses.FindParameters;
            import com.esri.ags.tasks.supportClasses.FindResult;
            import com.esri.ags.utils.GeometryUtil;
            import com.esri.ags.utils.WebMercatorUtil;
            import com.esri.viewer.BaseWidget;
            import com.esri.viewer.ConfigData;
            import com.esri.viewer.ViewerContainer;
            import com.esri.viewer.utils.ErrorMessageUtil;
            import com.esri.viewer.utils.ItemHistory;

            import mx.events.FlexEvent;
            import mx.rpc.AsyncResponder;
            import mx.rpc.Fault;
            import mx.utils.StringUtil;

            import spark.components.List;
            import spark.events.IndexChangeEvent;
            import spark.events.TextOperationEvent;

            private const SINGLE_LINE_SEARCH:String = "SingleLineSearch";
            private const DEFAULT_LOCATOR_URL:String = "http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer";
            private const SEARCH_RESULT_SHARED_OBJECT_NAME:String = "searchResultHistory";

            private var singleAddressFieldName:String;
            private var findTask:FindTask = new FindTask();
            private var isFindEnabled:Boolean;
            private var searchLayers:Array = [];
            private var zoomScale:Number = 10000;
            private var geocodingResultLength:Number = 0;
            private var resultSimpleMarkerSymbol:SimpleMarkerSymbol;
            private var resultSimpleLineSymbol:SimpleLineSymbol;
            private var resultSimpleFillSymbol:SimpleFillSymbol;
            private var useProxy:Boolean;
            private var minscore:Number = 40;
            private var configXML:XML;
            private var configData:ConfigData;
            private var totalResultsToProcess:int;
            private var popUpRenderer:PopUpRenderer = new PopUpRenderer();
            private var searchLayersConfigured:Boolean;
            private var locatorConfigured:Boolean;
            private var searchResultHistory:ItemHistory = new ItemHistory();
            private var searchResultGraphic:com.esri.ags.Graphic;
            private var lastSearchTimestamp:int;

            [Bindable]
            private var map:Map;
            [Bindable]
            private var searchPrompt:String;

            [Bindable]
            private var searchResultTitleLabel:String;
            [Bindable]
            private var noResultsFoundLabel:String;

            private var _searchTerm:String;

            [Bindable]
            public function get searchTerm():String
            {
                return _searchTerm;
            }

            public function set searchTerm(value:String):void
            {
                _searchTerm = StringUtil.trim(value);
            }

            private var _hostBaseWidget:BaseWidget;

            public function get hostBaseWidget():BaseWidget
            {
                return _hostBaseWidget;
            }

            public function set hostBaseWidget(value:BaseWidget):void
            {
                _hostBaseWidget = value;
                if (_hostBaseWidget)
                {
                    configXML = _hostBaseWidget.configXML.search[0];
                    configData = _hostBaseWidget.configData;
                    map = _hostBaseWidget.map;
                    init();
                }
            }

            protected function this_initializeHandler(event:FlexEvent):void
            {
                registerClassAlias("com.esri.ags.tasks.supportClasses.FindResult", FindResult);
                registerClassAlias("com.esri.ags.tasks.supportClasses.AddressCandidate", AddressCandidate);
            }

            private function init():void
            {
                if (configXML)
                {
                    const configZoomScale:Number = parseFloat(configXML.zoomscale[0]);
                    if (configZoomScale > 0)
                    {
                        zoomScale = configZoomScale;
                    }

                    const configMinScore:Number = parseFloat(configXML.geocoding.minscore[0]);
                    if (configMinScore > 0)
                    {
                        minscore = configMinScore;
                    }

                    searchPrompt = configXML.labels.searchprompt[0] || hostBaseWidget.getDefaultString("searchPrompt");
                    noResultsFoundLabel = configXML.labels.noresults[0] || hostBaseWidget.getDefaultString("noResultsFoundLabel");
                    searchResultTitleLabel = configXML.labels.searchresulttitle[0] || hostBaseWidget.getDefaultString("searchResultTitleLabel");
                    isFindEnabled = (configXML.searchlayers[0] != null);

                    configureResultSymbols();
                    configureResultGraphic();

                    importSearchResultHistory();

                    configureLocator();

                    if (isFindEnabled)
                    {
                        configureSearchLayers();
                    }
                }
            }

            private function configureLocator():void
            {
                const url:String = configXML.geocoding.locator[0] || DEFAULT_LOCATOR_URL;

                if (configXML.useproxy.length() > 0)
                {
                    useProxy = configXML.useproxy == "true";
                }

                const locatorService:JSONTask = new JSONTask();
                locatorService.url = url;
                locator.url = url;

                if (useProxy && configData.proxyUrl)
                {
                    locatorService.proxyURL = configData.proxyUrl;
                    locator.proxyURL = configData.proxyUrl;
                }

                var urlVars:URLVariables = new URLVariables();
                urlVars.f = "json";

                locatorService.execute(urlVars, new AsyncResponder(locatorService_resultHandler, locatorService_faultHandler));
            }

            private function locatorService_resultHandler(addressFieldData:Object, token:Object = null):void
            {
                if (addressFieldData.singleLineAddressField)
                {
                    singleAddressFieldName = addressFieldData.singleLineAddressField.name;
                }
                else
                {
                    showError(hostBaseWidget.getDefaultString("singleLineGeocodingNotSupportedError"), SINGLE_LINE_SEARCH);
                }

                locatorConfigured = true;
                invalidateProperties();
            }

            override protected function commitProperties():void
            {
                super.commitProperties();

                if (locatorConfigured
                    || (isFindEnabled && searchLayersConfigured))
                {
                    configureSearchInput();
                }
            }

            private function locatorService_faultHandler(fault:Fault, token:Object = null):void
            {
                const errorMessage:String = hostBaseWidget.getDefaultString("locatorServiceConnectionError",
                                                                            locator.url,
                                                                            ErrorMessageUtil.getKnownErrorCauseMessage(fault),
                                                                            ErrorMessageUtil.makeHTMLSafe(fault.toString()));
                showError(errorMessage, SINGLE_LINE_SEARCH);
                locatorConfigured = true;
                invalidateProperties();
            }

            private function showError(message:String, title:String = null):void
            {
                _hostBaseWidget.showError(message, title);
            }

            private function configureSearchLayers():void
            {
                if (configXML.searchlayers.length() > 0)
                {
                    var searchLayer:SearchLayer;
                    for each (var layerInfo:XML in configXML.searchlayers.searchlayer)
                    {
                        searchLayer = new SearchLayer();
                        searchLayer.layerIds = layerInfo.layerids.toString().split(",");
                        searchLayer.layerURL = layerInfo.url.toString();
                        searchLayer.searchFields = layerInfo.searchfields.toString().split(",");

                        searchLayers.push(searchLayer);
                    }
                }

                searchLayersConfigured = true;
                invalidateProperties();
            }

            private function configureResultSymbols():void
            {
                if (configXML.symbols[0])
                {
                    const smsColor:uint = configXML.symbols.simplemarkersymbol.@color || 0xFF0000;
                    const smsAlpha:Number = (configXML.symbols.simplemarkersymbol.@alpha[0] != null) ? configXML.symbols.simplemarkersymbol.@alpha : 0.8;
                    const smsSize:Number = (configXML.symbols.simplemarkersymbol.@size[0] != null) ? configXML.symbols.simplemarkersymbol.@size : 15;
                    const smsOutlineColor:uint = configXML.symbols.simplefillsymbol.outline.@color || 0xFF0000;
                    const smsOutlineAlpha:Number = (configXML.symbols.simplefillsymbol.outline.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.outline.@alpha : 0.8;
                    const smsOutlineWidth:Number = (configXML.symbols.simplefillsymbol.outline.@width[0] != null) ? configXML.symbols.simplefillsymbol.outline.@width : 2;

                    resultSimpleMarkerSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, smsSize, smsColor, smsAlpha, 0, 0, 0,
                                                                      new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,
                                                                                           smsOutlineColor,
                                                                                           smsOutlineAlpha,
                                                                                           smsOutlineWidth));

                    const slsColor:uint = configXML.symbols.simplelinesymbol.@color || 0xFF0000;
                    const slsAlpha:Number = (configXML.symbols.simplelinesymbol.@alpha[0] != null) ? configXML.symbols.simplelinesymbol.@alpha : 0.8;
                    const slsWidth:Number = (configXML.symbols.simplelinesymbol.@width[0] != null) ? configXML.symbols.simplelinesymbol.@width : 2;

                    resultSimpleLineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, slsColor, slsAlpha, slsWidth);

                    const sfsColor:uint = configXML.symbols.simplefillsymbol.@color || 0xFF0000;
                    const sfsAlpha:Number = (configXML.symbols.simplefillsymbol.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.@alpha : 0.5;
                    const sfsOutlineColor:uint = configXML.symbols.simplefillsymbol.outline.@color || 0xFF0000;
                    const sfsOutlineAlpha:Number = (configXML.symbols.simplefillsymbol.outline.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.outline.@alpha : 0.8;
                    const sfsOutlineWidth:Number = (configXML.symbols.simplefillsymbol.outline.@width[0] != null) ? configXML.symbols.simplefillsymbol.outline.@width : 2;

                    resultSimpleFillSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, sfsColor, sfsAlpha,
                                                                  new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,
                                                                                       sfsOutlineColor,
                                                                                       sfsOutlineAlpha,
                                                                                       sfsOutlineWidth));
                }
            }

            private function configureResultGraphic():void
            {
                searchResultGraphic = new com.esri.ags.Graphic()
                const clearFeatureLabel:String = configXML.labels.clearfeaturelabel[0] || hostBaseWidget.getDefaultString("clearLabel");
                const customContextMenu:ContextMenu = new ContextMenu();
                customContextMenu.hideBuiltInItems();
                const menuItem:ContextMenuItem = new ContextMenuItem(clearFeatureLabel);
                menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItem_contextMenuDeleteHandler);
                customContextMenu.customItems.push(menuItem);
                searchResultGraphic.contextMenu = customContextMenu;
            }

            private function menuItem_contextMenuDeleteHandler(event:ContextMenuEvent):void
            {
                if (map.infoWindow.contentOwner == searchResultGraphic)
                {
                    map.infoWindow.hide();
                }
                map.defaultGraphicsLayer.remove(searchResultGraphic);
            }

            private function importSearchResultHistory():void
            {
                try
                {
                    const storedSearchResultHistory:SharedObject =
                        SharedObject.getLocal(SEARCH_RESULT_SHARED_OBJECT_NAME);

                    searchResultHistory.importHistory
                        (storedSearchResultHistory.data.searchResultHistory as Array);
                }
                catch (err:Error)
                {
                    //ignore
                }
            }

            private function configureSearchInput():void
            {
                const urlSearchTerm:String = getURLSearchTerm();
                if (urlSearchTerm)
                {
                    searchTerm = urlSearchTerm;
                    search();
                }
            }

            private function getURLSearchTerm():String
            {
                return ViewerContainer.urlConfigParams.search;
            }

            private function search():void
            {
                currentState = "normal";

                if (!searchTerm)
                {
                    return;
                }

                const hasCurrentSearchInProgress:Boolean = totalResultsToProcess > 0;
                if (hasCurrentSearchInProgress)
                {
                    cursorManager.removeBusyCursor();
                }

                cursorManager.setBusyCursor();
                map.infoWindow.hide();
                totalResultsToProcess = 0;
                searchResults.removeAll();

                totalResultsToProcess++;

                if (isFindEnabled)
                {
                    totalResultsToProcess += searchLayers.length;
                }

                lastSearchTimestamp = getTimer();

                const addressData:Object = {};
                addressData[singleAddressFieldName] = searchTerm;
                var locatorParams:AddressToLocationsParameters = new AddressToLocationsParameters();
                locatorParams.address = addressData;
                locatorParams.outFields = [ "Ymax", "Ymin", "Xmax", "Xmin" ];
                locatorParams.location = map.extent.center;
                locatorParams.distance = calculateExtentRadius();

                locator.addressToLocations(locatorParams, new AsyncResponder(locator_resultHandler, locator_faultHandler, lastSearchTimestamp));

                if (isFindEnabled)
                {
                    var searchLayer:SearchLayer;
                    for (var i1:Number = 0; i1 < searchLayers.length; i1++)
                    {
                        searchLayer = searchLayers[i1];
                        findTask.url = searchLayer.layerURL;
                        var findParams:FindParameters = new FindParameters();
                        findParams.contains = true;
                        findParams.layerIds = searchLayer.layerIds;
                        findParams.searchFields = searchLayer.searchFields;
                        findParams.searchText = searchTerm;
                        findParams.outSpatialReference = map.spatialReference;
                        findParams.returnGeometry = true;

                        findTask.execute(findParams, new AsyncResponder(findTask_resultHandler, findTask_faultHandler, lastSearchTimestamp));
                    }
                }
            }

            private function calculateExtentRadius():Number
            {
                var radius:Number;

                if (map.spatialReference.wkid == 4326
                    || map.spatialReference.isWebMercator())
                {
                    const currentExtent:Extent = map.extent;
                    var diagonal:Polyline = new Polyline([[ new MapPoint(currentExtent.xmin, currentExtent.ymin),
                                                            new MapPoint(currentExtent.xmax, currentExtent.ymax)]]);

                    if (map.spatialReference.isWebMercator())
                    {
                        diagonal = WebMercatorUtil.webMercatorToGeographic(diagonal) as Polyline;
                    }

                    const diagonalLength:Number = GeometryUtil.geodesicLengths([ diagonal ], Units.METERS)[0];

                    radius = Math.round(diagonalLength * 0.5);
                }

                return radius;
            }

            private function locator_resultHandler(results:Array, searchTimestamp:int):void
            {
                if (searchTimestamp != lastSearchTimestamp)
                {
                    return;
                }

                for each (var addressCandidate:AddressCandidate in results)
                {
                    if (addressCandidate.score >= minscore)
                    {
                        searchResults.addItem(addressCandidate);
                    }
                }

                decreaseProcessedResultCount();
            }

            private function decreaseProcessedResultCount():void
            {
                totalResultsToProcess--;

                if (totalResultsToProcess == 0)
                {
                    showSearchResults();
                }
            }

            private function showSearchResults():void
            {
                cursorManager.removeBusyCursor();

                if (searchResults.length > 1)
                {
                    currentState = "showingSearchResults";
                    resultList.selectedIndex = -1;
                }
                else if (searchResults.length == 1)
                {
                    showSearchResultOnMap(searchResults.getItemAt(0));
                }
                else
                {
                    currentState = "noResults";
                }
            }

            private function exportSearchResultHistory():void
            {
                try
                {
                    const searchResultHistoryToStore:SharedObject =
                        SharedObject.getLocal(SEARCH_RESULT_SHARED_OBJECT_NAME);

                    searchResultHistoryToStore.data.searchResultHistory =
                        searchResultHistory.exportHistory();
                    searchResultHistoryToStore.flush();
                }
                catch (err:Error)
                {
                    //ignore
                }
            }

            private function locator_faultHandler(info:Object, searchTimestamp:int):void
            {
                if (searchTimestamp != lastSearchTimestamp)
                {
                    return;
                }

                showError(info.toString(), SINGLE_LINE_SEARCH);
                decreaseProcessedResultCount();
            }

            private function findTask_resultHandler(results:Array, searchTimestamp:int):void
            {
                if (searchTimestamp != lastSearchTimestamp)
                {
                    return;
                }

                for each (var findResult:FindResult in results)
                {
                    searchResults.addItem(findResult);
                }

                decreaseProcessedResultCount();
            }

            private function findTask_faultHandler(error:Fault, searchTimestamp:int):void
            {
                if (searchTimestamp != lastSearchTimestamp)
                {
                    return;
                }

                decreaseProcessedResultCount();
            }

            //TODO: refactor!
            private function processSelectedSearchResult(searchResultList:List):void
            {
                showSearchResultOnMap(searchResultList.selectedItem);
                searchResultList.selectedIndex = -1;
                searchResultList.dataProvider.removeAll();
                currentState = "normal";
            }

            private function showSearchResultOnMap(searchResult:Object):void
            {
                map.defaultGraphicsLayer.remove(searchResultGraphic);
                const infoWindowRenderer:ClassFactory = new ClassFactory(PopUpRenderer);
                const popUpInfo:PopUpInfo = new PopUpInfo();
                popUpInfo.title = searchResultTitleLabel;
                popUpInfo.showZoomToButton = false; //hide the zoom to button as map would be zoomed-in 

                var resultExtent:Extent;

                if (searchResult is FindResult)
                {
                    const findResult:FindResult = searchResult as FindResult;
                    const resultLabel:String = findResult.value;
                    searchTerm = resultLabel;

                    searchResultGraphic.geometry = findResult.feature.geometry;
                    searchResultGraphic.symbol = getSymbolForGeometryType(searchResultGraphic.geometry.type);

                    popUpInfo.description = findResult.value;
                }
                else if (searchResult is AddressCandidate)
                {
                    const addressCandidate:AddressCandidate = searchResult as AddressCandidate;
                    searchTerm = addressCandidate.address as String;
                    resultExtent = getGeographicResultExtent(addressCandidate);

                    if (map.spatialReference.isWebMercator())
                    {
                        resultExtent = WebMercatorUtil.geographicToWebMercator(resultExtent) as Extent;
                    }

                    searchResultGraphic.geometry = addressCandidate.location;
                    searchResultGraphic.symbol = getSymbolForGeometryType(searchResultGraphic.geometry.type);

                    popUpInfo.description = addressCandidate.address as String;
                }
                else
                {
                    return;
                }

                storeSearchResult(searchResult);

                infoWindowRenderer.properties = { popUpInfo: popUpInfo };
                searchResultGraphic.infoWindowRenderer = infoWindowRenderer;

                if (searchResultGraphic.symbol)
                {
                    map.defaultGraphicsLayer.add(searchResultGraphic);
                }

                popUpRenderer.popUpInfo = popUpInfo;
                popUpRenderer.graphic = searchResultGraphic;

                const resultPoint:MapPoint = getGeometryCenter(searchResultGraphic.geometry);

                if (resultExtent)
                {
                    map.zoomTo(resultExtent);
                }
                else
                {
                    if (searchResultGraphic.geometry.type == Geometry.MAPPOINT)
                    {
                        if (map.scale > zoomScale)
                        {
                            map.scale = zoomScale;
                        }
                    }

                    map.zoomTo(searchResultGraphic.geometry);
                }

                infoWindowShow(resultPoint);
            }

            private function getSymbolForGeometryType(geometryType:String):Symbol
            {
                var symbol:Symbol;

                switch (geometryType)
                {
                    case Geometry.POLYLINE:
                    {
                        symbol = resultSimpleLineSymbol;
                        break;
                    }
                    case Geometry.POLYGON:
                    {
                        symbol = resultSimpleFillSymbol;
                        break;
                    }
                    case Geometry.MAPPOINT:
                    default:
                    {
                        symbol = resultSimpleMarkerSymbol;
                    }
                }

                return symbol;
            }

            private function getGeographicResultExtent(addressCandidate:AddressCandidate):Extent
            {
                const canCreateResultExtent:Boolean = addressCandidate
                    && addressCandidate.attributes
                    && !isNaN(addressCandidate.attributes.Xmin)
                    && !isNaN(addressCandidate.attributes.Ymin)
                    && !isNaN(addressCandidate.attributes.Xmax)
                    && !isNaN(addressCandidate.attributes.Ymax);

                return canCreateResultExtent ? new Extent(addressCandidate.attributes.Xmin,
                                                          addressCandidate.attributes.Ymin,
                                                          addressCandidate.attributes.Xmax,
                                                          addressCandidate.attributes.Ymax) : null;
            }

            private function storeSearchResult(searchResult:Object):void
            {
                searchResultHistory.addItem(searchResult);
                exportSearchResultHistory();
            }

            private function getGeometryCenter(geometry:Geometry):MapPoint
            {
                var center:MapPoint;

                if (geometry is MapPoint)
                {
                    center = geometry as MapPoint;
                }
                else if (geometry)
                {
                    center = geometry.extent.center;
                }

                return center;
            }

            private function infoWindowShow(point:MapPoint):void
            {
                map.infoWindow.content = popUpRenderer;
                map.infoWindow.contentOwner = popUpRenderer.graphic;
                map.infoWindow.show(point);
            }

            protected function searchInput_focusInHandler(event:FocusEvent):void
            {
                if (currentState == "normal")
                {
                    if (searchResults.length > 1)
                    {
                        currentState = "showingSearchResults";
                        resultList.selectedIndex = -1;
                    }
                    else
                    {
                        processSearchResult();
                    }
                }
            }

            protected function this_focusOutHandler(event:FocusEvent):void
            {
                if (event.relatedObject == resultList
                    || event.relatedObject == searchInput)
                {
                    return;
                }

                currentState = "normal";
            }

            protected function searchInput_changeHandler(event:TextOperationEvent):void
            {
                processSearchResult();
            }

            private function processSearchResult():void
            {
                if (searchResults.length > 0)
                {
                    searchResults.removeAll();
                }

                const searchResultMatches:Array = searchInHistory(searchTerm);
                searchResultHistoryList.source = searchResultMatches;
                if (searchResultMatches.length > 0)
                {
                    currentState = "showingPreviousSearchResults";
                    resultList.selectedIndex = -1;
                }
                else
                {
                    currentState = "normal";
                }
            }

            private function searchInHistory(input:String):Array
            {
                const matches:Array = [];

                if (input)
                {
                    input = input.toLowerCase();

                    const searchResultItems:Array = searchResultHistory.items;
                    var searchResult:Object;
                    for (var i:int = searchResultItems.length - 1; i >= 0; i--)
                    {
                        searchResult = searchResultItems[i];
                        if (SearchResultUtil.searchResultToLabel(searchResult).toLowerCase().indexOf(input) != -1)
                        {
                            matches.unshift(searchResult);
                            if (matches.length >= 10)
                            {
                                break;
                            }
                        }
                    }
                }

                return matches;
            }

            protected function searchInput_keyDownHandler(event:KeyboardEvent):void
            {
                if (event.keyCode == Keyboard.ESCAPE)
                {
                    currentState = "normal";
                }

                if (event.keyCode == Keyboard.DOWN)
                {
                    processDownKey();
                }

                if (event.keyCode == Keyboard.UP)
                {
                    processUpKey();
                }
            }

            private function processUpKey():void
            {
                if (currentState == "showingPreviousSearchResults"
                    || currentState == "showingSearchResults")
                {
                    resultList.selectedIndex--;
                    resultList.ensureIndexIsVisible(resultList.selectedIndex);
                }
            }

            private function processDownKey():void
            {
                if (currentState == "showingPreviousSearchResults"
                    || currentState == "showingSearchResults")
                {
                    resultList.selectedIndex++;
                    resultList.ensureIndexIsVisible(resultList.selectedIndex);
                }
            }

            protected function resultList_changeHandler(event:IndexChangeEvent):void
            {
                processSelectedSearchResult(resultList);
            }

            protected function searchInput_enterHandler(event:FlexEvent):void
            {
                if (resultList.selectedIndex > -1)
                {
                    processSelectedSearchResult(resultList);
                }
                else
                {
                    search();
                }
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <esri:Locator id="locator" outSpatialReference="{map.spatialReference}"/>

        <s:ArrayList id="searchResults"/>

        <s:ArrayList id="searchResultHistoryList"/>
    </fx:Declarations>

    <s:states>
        <s:State name="normal"/>
        <s:State name="showingSearchResults" stateGroups="showing"/>
        <s:State name="showingPreviousSearchResults" stateGroups="showing"/>
        <s:State name="noResults" stateGroups="showing"/>
    </s:states>

    <s:TextInput id="searchInput"
                 left="0" right="0" top="0" bottom="0"
                 change="searchInput_changeHandler(event)"
                 enter="search()"
                 enter.showing="searchInput_enterHandler(event)"
                 focusIn="searchInput_focusInHandler(event)"
                 keyDown.showing="searchInput_keyDownHandler(event)"
                 prompt="{searchPrompt}"
                 skinClass="com.esri.viewer.components.singleLineSearch.SearchInputSkin"
                 text="@{searchTerm}"/>

    <s:BorderContainer y="{searchInput.y + searchInput.height}" width="{searchInput.width}"
                       backgroundAlpha="{getStyle('contentBackgroundAlpha')}"
                       backgroundColor="{getStyle('contentBackgroundColor')}"
                       includeIn="noResults"
                       minHeight="15">
        <s:Label left="3" right="3" top="5" bottom="5"
                 fontStyle="italic"
                 text="{noResultsFoundLabel}"/>
    </s:BorderContainer>

    <singleLineSearch:ResultList id="resultList"
                                 y="{searchInput.y + searchInput.height}" width="{searchInput.width}"
                                 change="resultList_changeHandler(event)"
                                 dataProvider.showingPreviousSearchResults="{searchResultHistoryList}"
                                 dataProvider.showingSearchResults="{searchResults}"
                                 includeIn="showing"
                                 itemRenderer="com.esri.viewer.components.singleLineSearch.ResultListItemRenderer"
                                 searchText="{searchTerm}">
        <singleLineSearch:layout>
            <s:VerticalLayout gap="0"
                              horizontalAlign="contentJustify"
                              requestedRowCount="{(resultList.dataProvider.length &lt; 6) ? resultList.dataProvider.length : 6}"/>
        </singleLineSearch:layout>
    </singleLineSearch:ResultList>
</s:Group>
